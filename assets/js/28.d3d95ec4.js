(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{502:function(a,s,t){"use strict";t.r(s);var e=t(41),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"beans"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beans"}},[a._v("#")]),a._v(" Beans")]),a._v(" "),t("p",[t("code",[a._v("Beans")]),a._v("  是 Spring 管理的对象。Spring 管理所有的依赖（对象），并在对象实例化前注入依赖。通常通过 @Component 注解来定义 "),t("code",[a._v("beans")]),a._v(" .")]),a._v(" "),t("p",[a._v("@Controller, @Service, @Repository 这三个注解本质都是表示 @Component，主要用来标识 Spring MVC 中不同的层。")]),a._v(" "),t("h3",{attrs:{id:"component-和-bean-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-的区别"}},[a._v("#")]),a._v(" @Component 和 @Bean 的区别：")]),a._v(" "),t("ul",[t("li",[a._v("@Component 作用于类，@Bean 作用于方法，可以根据两者的 @Target 得出。")]),a._v(" "),t("li",[a._v("@Component 如过需要自定义扫描路径，通常会配合 @ComponentScan 一起使用")]),a._v(" "),t("li",[a._v("@Bean 通常会和 @Configuration 一起使用，一般当我们引入第三方库中的类需要装配到 Spring 容器时使用。被 @Configuration 修饰的类，spring 容器中会通过 cglib 给这个类创建一个代理，代理会拦截所有被 @Bean 修饰的方法，默认情况（bean 为单例）下确保这些方法只被调用一次，从而确保这些 bean 是同一个 bean，即"),t("strong",[a._v("单例")]),a._v("的。"),t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1751910",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"bean的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean的作用域"}},[a._v("#")]),a._v(" Bean 的作用域")]),a._v(" "),t("p",[a._v("Spring 中的 bean 通过指定 scope 的值来决定作用域。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("singleton")]),a._v(": singleton 是默认的作用域，表示单例，就是在创建容器的同时自动创建一个 bean 对象，不管你是否使用，它都存在，每次获得的对象都是同一个对象。")]),a._v(" "),t("li",[t("strong",[a._v("prototype")]),a._v(": 在创建容器的时候没有实例化，而是当我们获取 bean 的时候才会创建一个对象，而且我们每次获取的对象都不是同一个对象。")]),a._v(" "),t("li",[a._v("request, session, …")])]),a._v(" "),t("h2",{attrs:{id:"控制反转-ioc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-ioc"}},[a._v("#")]),a._v(" 控制反转 IOC")]),a._v(" "),t("p",[a._v("传统上，如果一个类依赖于另一个类，我们需要再类中主动创建另一个类的实例，而在 Spring 中，Spring 会帮助我们创建和管理对象，并在需要的时候找到所需依赖并注入，这就叫反转控制。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/byc996/picb/image-20230427112747732.png",alt:"image-20230427112747732"}})]),a._v(" "),t("h3",{attrs:{id:"ioc容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ioc容器"}},[a._v("#")]),a._v(" IOC 容器")]),a._v(" "),t("p",[a._v("IOC 容器用于管理 Spring 中的 Beans。主要分为两种：")]),a._v(" "),t("ul",[t("li",[a._v("BeanFactory：基本的 IOC 容器，提供了控制反转和依赖注入功能。")]),a._v(" "),t("li",[a._v("ApplicationContext：在 BeanFactory 的基础上增加了更多高级功能。在实际项目中，用得更多的是 ApplicationContext。")])]),a._v(" "),t("h2",{attrs:{id:"依赖注入-di"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入-di"}},[a._v("#")]),a._v(" 依赖注入 DI")]),a._v(" "),t("p",[a._v("Dependency injection：Spring 通过依赖注入的方式来管理 Bean 之间的依赖关系。保证类之间的独立性，实现松耦合。")]),a._v(" "),t("p",[a._v("三种注入方式，"),t("a",{attrs:{href:"https://blog.csdn.net/Weixiaohuai/article/details/120981207",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考"),t("OutboundLink")],1),a._v("：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("变量注入（Field Injection)：注入方式简单，非常简洁。")]),a._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserMapper")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])])])])]),a._v(" "),t("li",[t("p",[a._v("setter 注入（Setter Injection）：")]),a._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserMapper")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setUserMapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserMapper")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("userMapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])])])])]),a._v(" "),t("li",[t("p",[a._v("构造方法注入（Constructor Injection）：")]),a._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserMapper")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserServiceImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserMapper")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("userMapper "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" userMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])])])])])]),a._v(" "),t("p",[a._v("注入 Bean 的注解：")]),a._v(" "),t("ul",[t("li",[a._v("@Autowired：Spring 提供的注解")]),a._v(" "),t("li",[a._v("@Resource：JDK 提供的注解")]),a._v(" "),t("li",[a._v("@Inject：JDK 提供的注解")])]),a._v(" "),t("p",[t("strong",[a._v("@Autowired 和 @Resource 使用较多")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"面向切面编程-aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向切面编程-aop"}},[a._v("#")]),a._v(" 面向切面编程 AOP")]),a._v(" "),t("p",[a._v("未完待续…")])])}),[],!1,null,null,null);s.default=n.exports}}]);